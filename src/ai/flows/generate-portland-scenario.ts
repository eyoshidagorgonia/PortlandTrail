
'use server';
/**
 * @fileOverview An agentic scenario generator for the Portland Trail game.
 *
 * - generatePortlandScenario - A function that uses an AI agent to generate a scenario.
 * - GeneratePortlandScenarioInput - The input type for the generatePortlandScenario function.
 * - GeneratePortlandScenarioOutput - The return type for the generatePortlandScenario function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'zod';

const GeneratePortlandScenarioInputSchema = z.object({
  playerStatus: z
    .string()
    .describe('The current status of the player, including hunger, style, vinyl collection, irony, and authenticity.'),
  location: z.string().describe('The current location of the player on the trail.'),
});
export type GeneratePortlandScenarioInput = z.infer<typeof GeneratePortlandScenarioInputSchema>;

const ScenarioSchema = z.object({
    scenario: z.string().describe('A description of the generated scenario.'),
    challenge: z.string().describe('A challenge the player must overcome in the scenario.'),
    reward: z.string().describe('A potential reward for overcoming the challenge.'),
    diablo2Element: z
      .string()
      .optional(),
    imagePrompt: z.string().describe('A short, 2-4 word prompt for an image generator to create a visual for this scenario. e.g. "Pigeons in hats" or "Man with handlebar mustache"'),
});

const BadgeSchema = z.object({
    badgeDescription: z.string().describe('A short, witty description for a merit badge earned by embracing this weird scenario.'),
    badgeImagePrompt: z.string().describe('A 2-3 word prompt for an image generator to create a small, circular, embroidered patch-style badge for this scenario.'),
});

// The final output can have a scenario, and optionally a badge.
const GeneratePortlandScenarioOutputSchema = ScenarioSchema.merge(BadgeSchema.partial());
export type GeneratePortlandScenarioOutput = z.infer<typeof GeneratePortlandScenarioOutputSchema>;

const GeneratePortlandScenarioAndSourceOutputSchema = GeneratePortlandScenarioOutputSchema.extend({
    dataSource: z.enum(['primary', 'fallback', 'hardcoded']).describe('The source of the generated data.'),
    agentic: z.boolean().describe('Whether the response was generated by an agentic process.'),
});
type GeneratePortlandScenarioAndSourceOutput = z.infer<typeof GeneratePortlandScenarioAndSourceOutputSchema>;

export async function generatePortlandScenario(
  input: GeneratePortlandScenarioInput
): Promise<GeneratePortlandScenarioAndSourceOutput> {
  return generatePortlandScenarioFlow(input);
}


// Tool: Create a merit badge if the scenario is worthy.
const createMeritBadge = ai.defineTool(
    {
      name: 'createMeritBadge',
      description: 'Use this tool ONLY when the generated scenario is exceptionally weird, interesting, or uniquely challenging, deserving of a special merit badge.',
      inputSchema: z.object({
        scenarioContext: z.string().describe("A brief summary of the scenario that justifies awarding a badge."),
      }),
      outputSchema: BadgeSchema,
    },
    async ({ scenarioContext }) => {
      console.log(`[createMeritBadge] Tool called for context: ${scenarioContext}`);
      const prompt = `Based on the following game scenario, create a witty merit badge.
  
      Scenario Context: "${scenarioContext}"
  
      You MUST respond with a valid JSON object only, with no other text before or after it. The JSON object should conform to this structure:
      {
        "badgeDescription": "A short, witty description for the merit badge.",
        "badgeImagePrompt": "A 2-3 word prompt for an image generator to create the badge image."
      }`;
      
      // Using a separate, non-agentic model for the tool call itself.
      const llmResponse = await ai.generate({
          model: 'googleai/gemini-pro', // Using a standard model for the tool logic
          prompt,
          config: {
              responseFormat: 'json',
          },
      });
  
      return BadgeSchema.parse(JSON.parse(llmResponse.text));
    }
);

// Agentic Prompt: This prompt guides the main agent.
const agentPrompt = ai.definePrompt(
    {
      name: 'portlandTrailAgentPrompt',
      inputSchema: GeneratePortlandScenarioInputSchema,
      output: { schema: GeneratePortlandScenarioOutputSchema },
      tools: [createMeritBadge], // Make the tool available to the agent
      system: `You are a game master for The Portland Trail. Your job is to create a quirky, random, and challenging scenario for the player based on their current status and location.

      The scenario must be HIGHLY SPECIFIC to the current location. Incorporate local landmarks, stereotypes, or cultural touchstones. Also, subtly weave in an unexpected element inspired by the dark fantasy world of Diablo II.
      
      After creating the scenario, you must decide if it is weird or special enough to warrant a merit badge. If it is, use the createMeritBadge tool. If it's just a standard event, do not use the tool.`,
    },
);

const generatePortlandScenarioFlow = ai.defineFlow(
  {
    name: 'generatePortlandScenarioFlow',
    inputSchema: GeneratePortlandScenarioInputSchema,
    outputSchema: GeneratePortlandScenarioAndSourceOutputSchema,
  },
  async (input) => {
    console.log(`[generatePortlandScenarioFlow] Agent started for location: ${input.location}`);
    
    try {
        const { output } = await agentPrompt(input);
        
        if (!output) {
            throw new Error("Agent did not produce a valid output.");
        }

        console.log('[generatePortlandScenarioFlow] Agent executed successfully.');
        if (output.badgeDescription) {
            console.log(`[generatePortlandScenarioFlow] Agent decided to award a badge: "${output.badgeDescription}"`);
        } else {
            console.log('[generatePortlandScenarioFlow] Agent decided not to award a badge for this scenario.');
        }

        return {
            ...output,
            dataSource: 'primary',
            agentic: true,
        };

    } catch (error) {
        console.error(`[generatePortlandScenarioFlow] Agent failed. Returning hard-coded scenario.`, { error });
        // Fallback to a hardcoded response if the agent fails
        return {
            scenario: "You encounter a glitch in the hipster matrix. A flock of identical pigeons, all wearing tiny fedoras, stares at you menacingly before dispersing.",
            challenge: "Question your reality",
            reward: "A fleeting sense of existential dread, which oddly increases your irony.",
            diablo2Element: "You feel as though you've just witnessed a 'Diablo Clone' event, but for birds.",
            imagePrompt: "pigeons wearing fedoras",
            badgeDescription: "Fedorapocalypse Witness",
            badgeImagePrompt: "pigeon wearing fedora",
            dataSource: 'hardcoded',
            agentic: false,
        }
    }
  }
);
